#!/usr/bin/env bash


## Global settings
# image name
DOCKER_IMAGE="${DOCKER_REPO:-smtp-relay}"
# "production" branch
PRODUCTION_BRANCH=${PRODUCTION_BRANCH:-master}


## Local settings
alpine_version=`cat Dockerfile | grep --perl-regexp --only-matching '(?<=FROM alpine:)[0-9.]+'`
arch=`uname --machine`


## Initialization
set -e

# If empty version, fetch the latest from repository
if [ -z "$POSTFIX_VERSION" ]; then
  POSTFIX_VERSION=`curl -s "https://pkgs.alpinelinux.org/packages?name=postfix&branch=v${alpine_version}&repo=main&arch=${arch}" \
                     | grep --perl-regexp --only-matching '(?<=<td class="version">)[a-z0-9.-]+' | uniq`
  # no postfix fixed version => latest build
  image_tags="${image_tags} latest"
  test -n "$POSTFIX_VERSION"
fi
echo "-> selected Postfix version ${POSTFIX_VERSION}"

# If empty version, fetch the latest from repository
if [ -z "$RSYSLOG_VERSION" ]; then
  RSYSLOG_VERSION=`curl -s "https://pkgs.alpinelinux.org/packages?name=rsyslog&branch=v${alpine_version}&repo=main&arch=${arch}" \
                     | grep --perl-regexp --only-matching '(?<=<td class="version">)[a-z0-9.-]+' | uniq`
  test -n "$RSYSLOG_VERSION"
fi
echo "-> selected Rsyslog version ${RSYSLOG_VERSION}"

# If empty commit, fetch the current from local git rpo
if [ -n "${SOURCE_COMMIT}" ]; then
  VCS_REF="${SOURCE_COMMIT}"
else
  VCS_REF="`git rev-parse --short HEAD`"
fi
test -n "$VCS_REF"
echo "-> current vcs reference ${VCS_REF}"

# If empty branch, fetch the current from local git rpo
if [ -n "${SOURCE_BRANCH}" ]; then
  VCS_BRANCH="${SOURCE_BRANCH}"
else
  VCS_BRANCH="`git rev-parse --abbrev-ref HEAD`"
fi
test -n "$VCS_BRANCH"
echo "-> current vcs branch ${VCS_BRANCH}"

# set the docker tag prefix if needed
if [ "${VCS_BRANCH}" != "${PRODUCTION_BRANCH}" ]; then
  docker_tags_prefix="${VCS_BRANCH}-"
fi
echo "-> use tag prefix ${docker_tags_prefix}"

# Get the current image static version
image_version=`cat VERSION`
echo "-> use image version ${image_version}"

# customs tags
image_tags="${image_tags} ${image_version}"
echo "-> use image tags ${image_tags}"

# finals
image_final_tags=""
for tag in $image_tags; do
  image_final_tags="${image_final_tags} ${docker_tags_prefix}${tag}"
done
image_final_tags=`echo $image_final_tags | tr ' ' '\n' | uniq | tr '\n' ' '`
echo "-> use final image tags list ${image_final_tags}"
echo "${image_final_tags}" > ${PWD}/_tags

echo "-> use image name ${DOCKER_IMAGE}"

image_building_name="${DOCKER_IMAGE}:building"
echo "-> use image name '${image_building_name}' for build"
echo "${image_building_name}" > ${PWD}/_image_build


## Build image
echo "=> building ${image_building_name} with image version: ${image_version}"
docker build --build-arg "POSTFIX_VERSION=${POSTFIX_VERSION}" \
             --build-arg "RSYSLOG_VERSION=${RSYSLOG_VERSION}" \
             --label 'maintainer=Pierre GINDRAUD <pgindraud@gmail.com>' \
             --label "org.label-schema.build-date=`date -u +'%Y-%m-%dT%H:%M:%SZ'`" \
             --label 'org.label-schema.name=smtp-relay' \
             --label 'org.label-schema.description=SMTP server configured as a email relay' \
             --label 'org.label-schema.url=https://github.com/Turgon37/docker-smtp-relay' \
             --label "org.label-schema.vcs-ref=${VCS_REF}" \
             --label 'org.label-schema.vcs-url=https://github.com/Turgon37/docker-smtp-relay' \
             --label 'org.label-schema.vendor=Pierre GINDRAUD' \
             --label "org.label-schema.version=${image_version}" \
             --label 'org.label-schema.schema-version=1.0' \
             --label "application.postfix.version=${POSTFIX_VERSION}" \
             --label "application.rsyslog.version=${RSYSLOG_VERSION}" \
             --tag "${image_building_name}" \
             --file "${DOCKERFILE_PATH:-Dockerfile}" \
             .
