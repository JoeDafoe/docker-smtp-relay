#!/usr/bin/env bash

## Global settings
# docker hub username
DOCKER_USERNAME="${DOCKERHUB_REGISTRY_USERNAME:-turgon37}"
# image name
DOCKER_IMAGE="${DOCKER_USERNAME}/${DOCKER_IMAGE:-smtp-relay}"
# "production" branch
PRODUCTION_BRANCH=${PRODUCTION_BRANCH:-master}

## Local settings
alpine_version=`cat Dockerfile | grep --perl-regexp --only-matching '(?<=FROM alpine:)[0-9.]+'`
arch=`uname --machine`

## Settings initialization
set -e
set -x

# If empty version, fetch the latest from repository
if [ -z "$POSTFIX_VERSION" ]; then
  POSTFIX_VERSION=`curl -s "https://pkgs.alpinelinux.org/packages?name=postfix&branch=v${alpine_version}&repo=main&arch=${arch}" | grep --perl-regexp --only-matching '(?<=<td class="version">)[a-z0-9.-]+' | uniq`
fi
echo "-> selected Postfix version ${POSTFIX_VERSION}"

# If empty version, fetch the latest from repository
if [ -z "$RSYSLOG_VERSION" ]; then
  RSYSLOG_VERSION=`curl -s "https://pkgs.alpinelinux.org/packages?name=rsyslog&branch=v${alpine_version}&repo=main&arch=${arch}" | grep --perl-regexp --only-matching '(?<=<td class="version">)[a-z0-9.-]+' | uniq`
fi
echo "-> selected Rsyslog version ${RSYSLOG_VERSION}"

# If empty version, fetch the latest from repository
if [ -n "$SOURCE_COMMIT" ]; then
  VCS_REF=$SOURCE_COMMIT
else
  VCS_REF=`git rev-parse --short HEAD`
fi
echo "-> current vcs reference ${VCS_REF}"

# set the docker image version
if [ -n "${SOURCE_BRANCH}" ]; then
  DOCKER_IMAGE_VERSION="${SOURCE_BRANCH}"
else
  DOCKER_IMAGE_VERSION="`git rev-parse --abbrev-ref HEAD`"
fi
echo "-> use image version ${DOCKER_IMAGE_VERSION}"

image_version=`cat VERSION`
echo "-> building ${DOCKER_IMAGE} with image version: ${image_version}"
